@typeparam TModel where TModel : class, new()

<EditForm EditContext="_editContext" OnValidSubmit="ValidSubmit" novalidate>
  @ChildContent
</EditForm>

@code
{
  public class SubmitCallbackArgs(
    EditContext editContext,
    ValidationMessageStore validationMessageStore)
  {
    public EditContext EditContext { get; } = editContext;
    public ValidationMessageStore ValidationMessageStore { get; } = validationMessageStore;
  }
  
  [Parameter] public TModel Model { get; set; } = new();
  [Parameter] public EventCallback<SubmitCallbackArgs> OnValidSubmit { get; set; }
  [Parameter, EditorRequired] public RenderFragment? ChildContent { get; set; }

  private EditContext _editContext = null!;
  private ValidationMessageStore _messageStore = null!;

  protected override void OnInitialized()
  {
    _editContext = new EditContext(Model);
    _messageStore = new ValidationMessageStore(_editContext);

    _editContext.OnFieldChanged += (_, args) =>
    {
      _messageStore.Clear(args.FieldIdentifier);
      _editContext.NotifyValidationStateChanged();
    };
  }
  
  private async Task ValidSubmit()
  {
    if (OnValidSubmit.HasDelegate)
    {
      await OnValidSubmit.InvokeAsync(new SubmitCallbackArgs(_editContext, _messageStore));
    }
  }
}
